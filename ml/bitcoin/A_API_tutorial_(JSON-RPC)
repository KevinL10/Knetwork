Run bitcoind or bitcoin-qt -server. You can control it via the command-line bitcoin-cli utility or by HTTP JSON-RPC commands.
You must create a bitcoin.conf configuration file setting an rpcuser and rpcpassword; see Running Bitcoin for details.
Now run:
A list of RPC calls will be shown.
If you are learning the API, it is a very good idea to use the test network (run bitcoind -testnet and bitcoin-cli -testnet).
Running Bitcoin with the -server argument (or running bitcoind) tells it to function as a HTTP JSON-RPC server, but 
Basic access authentication must be used when communicating with it, and, for security, by default, the server only accepts connections from other processes on the same machine.  If your HTTP or JSON library requires you to specify which 'realm' is authenticated, use 'jsonrpc'.
Bitcoin supports SSL (https) JSON-RPC connections beginning with version 0.3.14.  See the rpcssl wiki page for setup instructions and a list of all bitcoin.conf configuration options.
Allowing arbitrary machines to access the JSON-RPC port (using the rpcallowip configuration option) is dangerous and strongly discouraged-- access should be strictly limited to trusted machines.
To access the server you should find a suitable library for your language.
See the proper money handling page for notes on avoiding rounding errors when handling bitcoin values.
python-jsonrpc is the official JSON-RPC implementation for Python.
It automatically generates Python methods for RPC calls.
However, due to its design for supporting old versions of Python, it is also rather inefficient.
jgarzik has forked it as Python-BitcoinRPC and optimized it for current versions.
Generally, this version is recommended.
While BitcoinRPC lacks a few obscure features from jsonrpc, software using only the ServiceProxy class can be written the same to work with either version the user might choose to install:
The latest version of python-bitcoinrpc has a new syntax.
Get the rebar dependency from https://github.com/edescourtis/ebitcoind . By default the client will use the configuration in $HOME/.bitcoin/bitcoin.conf or you can instead specify a URI like this:
Here is a usage example:
The JSON-RPC PHP library also makes it very easy to connect to Bitcoin.  For example:
Note: The jsonRPCClient library uses fopen() and will throw an exception saying "Unable to connect" if it receives a 404 or 500 error from bitcoind. This prevents you from being able to see error messages generated by bitcoind (as they are sent with status 404 or 500). The EasyBitcoin-PHP library is similar in function to JSON-RPC PHP but does not have this issue.
The easiest way to tell Java to use HTTP Basic authentication is to set a default Authenticator:
Once that is done, any JSON-RPC library for Java (or ordinary URL POSTs) may be used to communicate with the Bitcoin server.
Instead of writing your own implementation, consider using one of the existing wrappers like BitcoindClient4J, btcd-cli4j or Bitcoin-JSON-RPC-Client instead.
The JSON::RPC package from CPAN can be used to communicate with Bitcoin.  You must set the client's credentials; for example:
The btcrpcclient package can be used to communicate with Bitcoin.  You must provide credentials to match the client you are communicating with.
The communication with the RPC service can be achieved using the standard http request/response objects.
A library for serializing and deserializing Json will make your life a lot easier:
Json.NET ( http://james.newtonking.com/json ) is a high performance JSON package for .NET.  It is also available via NuGet from the package manager console ( Install-Package Newtonsoft.Json ).
The following example uses Json.NET:
There is also a wrapper for Json.NET called Bitnet (https://sourceforge.net/projects/bitnet)
implementing Bitcoin API in more convenient way:
A more complete library and wrapper for Bitcoin is BitcoinLib (https://github.com/GeorgeKimionis/BitcoinLib) which is also available via NuGet from the package manager console (Install-Package BitcoinLib). 
Querying the daemon with BitcoinLib is as simple as:
Example using bitcoin-core:
gentle_rpc is a typescript JSON-RPC library for Deno, it works perfectly with lowercase function names.
Example using gentle_rpc:
You can also send commands and see results using cURL or some other command-line HTTP-fetching utility; for example:
You will be prompted for your rpcpassword, and then will see something like:
jsonrpc-cli provides simple json queries from the command-line with highlighted json results (colors) and the ability to view/debug raw http requests and responses.
clj-btc is a Clojure wrapper for the bitcoin API.
The C API for processing JSON is Jansson. C applications like libblkmaker use cURL for making the calls and Jansson for interpreting the JSON that cURL fetches.
For example basic usage (which can be easily modified for Bitcoin RPC), see the Jansson example github_commits.c and the associated tutorial.


The following does with libcurl what the cURL example above does:
This output can be parsed with Jansson, Ã  la the Jansson tutorial linked to above.
(source: Bitcoin StackExchange)
QJsonRpc is a Qt/C++ implementation of the JSON-RPC protocol. It integrates nicely with Qt, leveraging Qt's meta object system in order to provide services over the JSON-RPC protocol. QJsonRpc is licensed under the LGPLv2.1.
Bitcoin Knots 0.13.1 added support for loading multiple, separate wallets.
Multi-wallet can be enabled by using more than one -wallet argument when starting Bitcoin, either on the command line or in the Bitcoin config file.
This was also included in Bitcoin Core 0.15.
Wallet-level RPC calls (like importaddress or listtransactions) can specify which wallet file will be accessed. This is done by setting the HTTP endpoint in the JSON-RPC request in the format <RPC IP address>:<RPC port>/wallet/<wallet name>, for example https://127.0.0.1:8332/wallet/wallet1.dat.
The command line utility bitcoin-cli can specify the wallet file using the -rpcwallet flag, for example bitcoin-cli -rpcwallet=wallet1.dat getbalance
For more details see the Bitcoin Core 0.15 release notes
Alternatively (but not available in Bitcoin Core at this time), an additional parameter can be specified to -rpcauth naming a default wallet for JSON-RPC accesses to the normal endpoint.